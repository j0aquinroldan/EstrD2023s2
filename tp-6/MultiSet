{-3. MultiSet (multiconjunto)
Ejercicio 6
Un MultiSet (multiconjunto) es un tipo abstracto de datos similar a un Set (conjunto). A diferencia
del último, cada elemento posee una cantidad de apariciones, que llamaremos ocurrencias del
elemento en el multiset. Su interfaz es la siguiente:
-}
import Map
module MultiSet 


(MultiSet, emptyMS, addMS, ocurrencesMS, unionMS, intersectionMS, multiSetToList)
where 

data MultiSet a = MS (Map a int)


emptyMS :: MultiSet a
--Propósito: denota un multiconjunto vacío.
addMS :: Ord a => a -> MultiSet a -> MultiSet a
--Propósito: dados un elemento y un multiconjunto, agrega una ocurrencia de ese elemento al
--multiconjunto.
ocurrencesMS :: Ord a => a -> MultiSet a -> Int
--Propósito: dados un elemento y un multiconjunto indica la cantidad de apariciones de ese
--elemento en el multiconjunto.
unionMS :: Ord a => MultiSet a -> MultiSet a -> MultiSet a (opcional)
--Propósito: dados dos multiconjuntos devuelve un multiconjunto con todos los elementos de
--ambos multiconjuntos.
intersectionMS :: Ord a => MultiSet a -> MultiSet a -> MultiSet a (opcional)
--Propósito: dados dos multiconjuntos devuelve el multiconjunto de elementos que ambos
--multiconjuntos tienen en común.
multiSetToList :: MultiSet a -> [(a, Int)]
--Propósito: dado un multiconjunto devuelve una lista con todos los elementos del conjunto y
--su cantidad de ocurrencias.

---------------
--O(1)
emptyMS = MS emptyM

------------------
--0(n) 
addMS x (MS mp) =  case lookupM x mp of 
                  Just n  ->  MS ( assocM x (n + 1) mp)
                  Nothing ->  MS (assocM x 1 mp)



--O(1)
valorInt :: Maybe Int -> Int
valorInt Nothing = 0
valorInt Just n = n

----------------
--O(n) n siendo la longitud de m
ocurrencesMS x (MS m) = case lookupM x mp of 
                        Just n  ->  n
                        Nothing ->  0


------------------

unionsMS (MS m1) (MS m2) = undefined 


     --addMS x (minimum (valorInt (lookUpM x m1)) (valorInt (lookUpM x m2))) map


-----------
intersectionMS (MS m1) (MS m2) =  undefined

-----------------------

multiSetToList (MS m) = mapToList m


--  O(n^2): n siendo la cantidad de elementos que haya en el map
mapToList :: Eq k => Map k v -> [(k, v)]
--Propósito: convierte un map en una lista de pares clave valor.
mapToList m = listar (keys m) m


--O(n^2)
listar :: Eq k => [k] -> Map k v-> [(k,v)]
listar [] m = []
listar (k:ks) m = (k, valor (lookupM k m)) : listar ks m

valor :: Maybe a -> a
valor (Just v) = v
